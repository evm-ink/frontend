import { useEffect, useMemo, useState } from 'react'
import clsx from 'clsx'

import { useGetNewCollection } from '@/hooks/useGetNewCollection.query'

import CreateCollectionFormStepper from '@/components/collection/create/CreateCollectionFormStepper'
import UploadForm from '@/components/collection/create/UploadForm'
import MintAndDeployForm from '@/components/collection/create/MintAndDeployForm'
import CollectionDetailsForm from '@/components/collection/create/CollectionDetailsForm'
import { FaInfoCircle } from 'react-icons/fa'
import { useGetCollectionStats } from '@/hooks/useGetCollectionStats.query'
// import { useDeployCollectionContractMutation } from '@/hooks/useDeployContract.mutation'

interface CreateCollectionPageProps {
  className?: string
}

const CreateCollectionPage = ({
  className,
}: CreateCollectionPageProps): JSX.Element => {
  const [currentStep, setCurrentStep] = useState(1)
  const [newCollectionUUID, setNewCollectionUUID] = useState<string>()

  const { data: collectionStatsData } = useGetCollectionStats()

  const { data: polledCollectionData, error } =
    useGetNewCollection(newCollectionUUID)

  const newCollectionProgress =
    polledCollectionData?.new_collections_by_pk?.progress
  const newCollectionStatus =
    polledCollectionData?.new_collections_by_pk?.status

  const bytecode = useMemo(() => {
    if (!polledCollectionData?.new_collections_by_pk?.bin_runtime) return

    return polledCollectionData?.new_collections_by_pk?.bin_runtime
  }, [polledCollectionData?.new_collections_by_pk?.bin_runtime])

  useEffect(() => {
    if (error) {
      setNewCollectionUUID(undefined)
    }
  }, [error])

  return (
    <div className={clsx('w-full max-w-screen-sm mx-auto my-10', className)}>
      {/* <DeployContractButton /> */}
      {+collectionStatsData?.collection_stats?.[0]?.in_progress > 10 &&
      currentStep === 1 &&
      !newCollectionUUID ? (
        <div className="w-full mb-10 p-4 rounded-2xl flex items-center gap-4 bg-yellow-500 dark:bg-yellow-400">
          <FaInfoCircle className="text-black flex-shrink-0" size={32} />
          <div className="flex flex-col gap-4">
            <p className="text-lg font-medium text-black leading-tight">
              You may experience slower uploads/processing due to extremely high
              interest in our collection creation flow.
            </p>
          </div>
        </div>
      ) : (
        <>
          <CreateCollectionFormStepper
            className="mb-10"
            currentStep={currentStep}
          />
          {(() => {
            switch (currentStep) {
              case 3:
                return (
                  <CollectionDetailsForm
                    newCollectionUUID={newCollectionUUID}
                    newCollectionStatus={newCollectionStatus}
                  />
                )

              case 2:
                return (
                  <MintAndDeployForm
                    newCollectionUUID={newCollectionUUID}
                    newCollectionStatus={newCollectionStatus}
                    bytecode={bytecode}
                    onSubmitSuccess={() => setCurrentStep(3)}
                  />
                )

              case 1:
              default:
                return (
                  <UploadForm
                    newCollectionStatus={newCollectionStatus}
                    newCollectionProgress={newCollectionProgress}
                    onNewCollectionUUID={(uuid) => setNewCollectionUUID(uuid)}
                    onSubmitSuccess={() => setCurrentStep(2)}
                  />
                )
            }
          })()}
        </>
      )}
    </div>
  )
}

export default CreateCollectionPage

// const DeployContractButton = () => {
//   const { mutateAsync: deployCollectionContract } =
//     useDeployCollectionContractMutation()

//   const onDeployContractClick = async () => {
//     try {
//       await deployCollectionContract({
//         bytecode:
//           '6080604052600060018190556002556fa6f3e5983ede439fb0bfa994362f1a7e60035560c8600455600580546001600160a01b03191673f39fd6e51aad88f6f4ce6ab8827279cfffb9226617905534801561005957600080fd5b50600080546001600160a01b03191633179055610c2d8061007b6000396000f3fe6080604052600436106100435760003560e01c80633ccfd60b14610095578063a035b1fe146100aa578063be27b22c146100d2578063d4938db3146100e55761004a565b3661004a57005b60005473ffffffffffffffffffffffffffffffffffffffff163303610093576040517f9adeddf84386b336eb7b3e18e7a6099be08fd81ea5d5142f4d2b630f8d20cf0190600090a15b005b3480156100a157600080fd5b506100936100fb565b3480156100b657600080fd5b506100c060015481565b60405190815260200160405180910390f35b6100936100e03660046109f9565b6101cb565b3480156100f157600080fd5b506100c060025481565b60005473ffffffffffffffffffffffffffffffffffffffff163314610181576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f596f75206172656e277420746865206f776e657200000000000000000000000060448201526064015b60405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116914780156108fc02929091818181858888f193505050501580156101c8573d6000803e3d6000fd5b50565b600154341015610207576040517f52b1bacc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002541561027f576002543360009081526006602052604090205403610259576040517f771912e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600660205260408120805460019290610279908490610b21565b90915550505b82516020808501919091206000818152600790925260409091205460ff16156102d4576040517f5e0eca7200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081815260076020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c829052603c81209050600061037b8286868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061067b92505050565b60055490915073ffffffffffffffffffffffffffffffffffffffff8083169116146103d2576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff166000886040516103fb9190610b34565b60006040518083038185875af1925050503d8060008114610438576040519150601f19603f3d011682016040523d82523d6000602084013e61043d565b606091505b50509050806104a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4661696c656420746f2073656e642045746865720000000000000000000000006044820152606401610178565b3415610672576000612710600454346104c19190610b63565b6104cb9190610b7a565b905060006104d98234610bb5565b60008054604051929350909173ffffffffffffffffffffffffffffffffffffffff9091169083908381818185875af1925050503d8060008114610538576040519150601f19603f3d011682016040523d82523d6000602084013e61053d565b606091505b50509050806105a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4661696c656420746f2073656e642045746865720000000000000000000000006044820152606401610178565b60405173c8fe02649547c24392cccff19f32b48403183e05908490600081818185875af1925050503d80600081146105fc576040519150601f19603f3d011682016040523d82523d6000602084013e610601565b606091505b5050809150508061066e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4661696c656420746f2073656e642045746865720000000000000000000000006044820152606401610178565b5050505b50505050505050565b600080600061068a85856106a1565b91509150610697816106e6565b5090505b92915050565b60008082516041036106d75760208301516040840151606085015160001a6106cb87828585610899565b945094505050506106df565b506000905060025b9250929050565b60008160048111156106fa576106fa610bc8565b036107025750565b600181600481111561071657610716610bc8565b0361077d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610178565b600281600481111561079157610791610bc8565b036107f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610178565b600381600481111561080c5761080c610bc8565b036101c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610178565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156108d0575060009050600361097f565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610924573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166109785760006001925092505061097f565b9150600090505b94509492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083601f8401126109c957600080fd5b50813567ffffffffffffffff8111156109e157600080fd5b6020830191508360208285010111156106df57600080fd5b600080600060408486031215610a0e57600080fd5b833567ffffffffffffffff80821115610a2657600080fd5b818601915086601f830112610a3a57600080fd5b813581811115610a4c57610a4c610988565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610a9257610a92610988565b81604052828152896020848701011115610aab57600080fd5b826020860160208301376000602084830101528097505050506020860135915080821115610ad857600080fd5b50610ae5868287016109b7565b9497909650939450505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561069b5761069b610af2565b6000825160005b81811015610b555760208186018101518583015201610b3b565b506000920191825250919050565b808202811582820484141761069b5761069b610af2565b600082610bb0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8181038181111561069b5761069b610af2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea26469706673582212209674ef4fc7a51c932faf01bf9d623f95292cb7617c9be6454f170542d41f708564736f6c63430008140033' as `0x${string}`,
//       })
//     } catch (error) {
//       console.log(error)
//     }
//   }

//   return (
//     <button
//       className="bg-red-500 mb-20 p-4 text-white font-bold rounded"
//       onClick={onDeployContractClick}
//     >
//       Deploy Contract
//     </button>
//   )
// }
